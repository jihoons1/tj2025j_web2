[ 스레드 ] : 프로그램(프로세스) 내에서 실행되는 작업 흐름/단위
    1. 하나의 프로세스에는 최소 1개의 스레드가 존재
    2. 자바는 main() 함수 실행시 main 스레드 1개 포함
    public static void main(String[] args) {
        SpringApplication.run( AppStart.class );
    }
[ 멀티스레드 ]
    1. main 스레드 외 새로운 작업스레드 실행
    2. 병렬처리(동시에 여러 작업 수행)

[ 스프링 스레드 ]
    1. 정의 : 스프링 프레임워크는 기본적으로 *멀티스레드(대규모)* 환경
        vs NODE.js : 단일스레드(소규모=쇼핑몰/앱)
    2. 사용처 :
        1. REST API ( 여러 사람이 서로 다른 URL 요청시 서로 다른 멀티스레드 지원 )
            /member/login , /member/info 동시 요청후 서로 다른 쓰레드가 처리한다.
        2. JDBC(DAO)
        3. 동기화 , 비동기화
[ 스프링 동기화 VS 비동기화 ]
    1. 동기화 : 여러 스레드가 하나의 메소드를 점령(호출) 할때 * 요청 순서대로* 처리하는 상태
        1) 순서 보장 함.
        2) 스프링 스레드 기본적으로 에 동기화 처리됨.
        3) 메소드가 끝날때 까지 *대기상태*
        4) 사용처 : (사용자 기다릴 필요있는) 즉시 처리후 처리 결과 반환 : 1명의 회원가입 , 로그인

    2. 비동기화 : 여러 스레드가 하나의 메소드를 점령(호출) 할때 * 처리 순서대로* 응답 하는 상태
        1) 순서 보장 안함.
        2) 스프링 스레드에서 비동기화 사용시 메소드 위에 @Async 붙인다.
        3) 메소드를 먼저 반환하고 다른스레드(백그라운드)가 처리한다.
        4) 사용처 : (사용자 기다릴 필요없는) 대량 데이터 연산, 외부 API 연동, 이메일전송, 알림/푸시 알림, 로그 등등

    3. 비동기화 사용법
        1. AppStart 클래스 위에 @EnableAsync 어노테이션 사용하여 비동기화 활성화
        2. 비동기화 사용할 서비스 메소드 위에 @Async 어노테이션 사용하여 비동기화 한다.
            -> 새로운 작업스레드가 생성되면서 **백그라운드** 실행처리.

    4. ** 스레드풀 : 정해진(한정된) 스레드 개수 를 가지고 작업 **
        예시] 1. 고객센터에 전화시 고객센터 직원 10명(스레드10개) 일때.
             2. 먼저 요청한 사람 순서대로 스레드를 점령한다.
             3. 대기중인 직원이 없으면 요청 대기한다.

        1. 정의 : 대량의 작업 스레드가 생성되는 것을 차단하고 안정적인 병렬 작업
        2. 스프링 스레드풀 사용하는 방법
            1. MVC폴더내 confing 폴더 생성하여 -> ThreadPoolConfig 클래스 생성
            2. 'ThreadPoolConfig' 클래스 위에 @Configuration 어노테이션 등록한다.
                * @Configuration 함으로써 스프링 컨테이너(메모리)에 빈(객체) 등록한다. IOC
        3.
            @Configuration // 스프링 컨테이너 빈 등록 , IOC
            @Bean
            public Executor taskExecutor() { // Executor : java.util import 하기
                    // 1) ThreadPoolTaskExecutor : 스레드풀 작업스레드 객체
                    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
                    executor.setCorePoolSize( ? ); // 기본(최소) 실행 스레드 개수 설정
                    executor.setMaxPoolSize( ? ); // 최대 실행 스레드 개수 설정
                    executor.setQueueCapacity( ? ); // 최대 대기 개수 설정 , 20명 대기 상태가 넘치면 503 오류 발생
                    executor.initialize(); // 스레드풀 초기화 : 서버 재실행 마다 초기화
                    return executor;
                }